<?php

namespace App\Exceptions;

use App\Services\ResponseService;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Response;
use Illuminate\Validation\UnauthorizedException;
use Illuminate\Validation\ValidationException;
use Symfony\Component\CssSelector\Exception\InternalErrorException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
//        if(!$request->isJson()) {
//            return parent::render($request, $e); // TODO: Change the autogenerated stub
//        }

        /** @var ResponseService $responseService */
        $responseService = app(ResponseService::class);

        return match (get_class($e)) {
            AuthenticationException::class, UnauthorizedException::class, UnauthorizedHttpException::class => $responseService->send(null, Response::HTTP_UNAUTHORIZED, !empty($e->getMessage()) ? $e->getMessage() : 'invalid_auth_token'),
            NotFoundHttpException::class, ModelNotFoundException::class => $responseService->send(null, Response::HTTP_NOT_FOUND, 'page_not_found'),
            MethodNotAllowedHttpException::class => $responseService->send(null, Response::HTTP_METHOD_NOT_ALLOWED, 'method_not_allow'),
            BadRequestHttpException::class => $responseService->send(null, Response::HTTP_BAD_REQUEST, $e->getMessage()),
            AccessDeniedHttpException::class => $responseService->send(null, Response::HTTP_FORBIDDEN, 'Access Denied'),
            ValidationException::class => $responseService->send($e, Response::HTTP_BAD_REQUEST, 'unknown_error'),
            HttpException::class => $responseService->send($e, $e->getStatusCode(), $e->getMessage()),
            InternalErrorException::class => $responseService->send(null, Response::HTTP_INTERNAL_SERVER_ERROR, $e->getMessage()),
            default => $responseService->send($e, Response::HTTP_INTERNAL_SERVER_ERROR),
        };
    }
}
